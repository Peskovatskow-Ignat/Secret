import sys
from datetime import datetime
from PyQt6 import uic
from PyQt6.QtWidgets import QApplication, QDialog
import socket
from threading import Thread
from time import sleep
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
data = ""


class IPconnect(QDialog):
    def __init__(self, sock):
        super().__init__()
        self.sock = sock
        uic.loadUi('ipclient.ui', self)
        self.setWindowTitle('ChatBobchat')
        self.createaccbutton.clicked.connect(lambda: self.ip_address())

    def ip_address(self):
        ip_address = self.password.text()
        self.password.setText('')
        print(ip_address)
        print(len(ip_address))
        if ip_address == '':
            print(0)
            return False
        print(len(ip_address))
        print(str(ip_address))
        self.sock.connect((ip_address, 55500))
        print(2)
        self.close()
        ex = Logup(self.sock)
        ex.show()
        sleep(1)


class Logup(QDialog):
    def __init__(self, sock):
        super().__init__()
        self.sock = sock
        uic.loadUi('log_up.ui', self)
        self.setWindowTitle('ChatBobchat')
        self.LogupButton.clicked.connect(lambda: self.log_in())
        self.createaccbutton.clicked.connect(lambda: self.to_reg())
        self.password_2.setReadOnly(True)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"
    def log_in(self):
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –ø–∞—Ä–æ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        self.password_2.setText('')
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
        login = self.username_2.text()
        password = self.password.text()
        if login == "" or password == "":
            self.password_2.setText("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return False
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (1 - –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É) –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        sock.send("1".encode())
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
        self.username_2.setText('')
        self.password.setText('')
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        sock.send(login.encode())
        sleep(0.1)
        sock.send(password.encode())
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        response = sock.recv(1024).decode()
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ø–æ–ª–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ
        self.password_2.setText(response)
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "–£—Å–ø–µ—à–Ω–æ", –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —á–∞—Ç–∞
        if "–£—Å–ø–µ—à–Ω–æ" in response:
            self.close()
            ex = Chat(self.sock)
            ex.show()
            sleep(1)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
    def to_reg(self):
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.close()
        ex = Reg(self.sock)
        ex.show()


class Reg(QDialog):
    def __init__(self, sock):
        super().__init__()
        self.sock = sock
        uic.loadUi('registrations.ui', self)
        self.setWindowTitle('ChatBobchat')
        self.LogupButton.clicked.connect(lambda: self.registers())
        self.createaccbutton.clicked.connect(lambda: self.to_log())
        self.password_2.setReadOnly(True)

        # –ú–µ—Ç–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    def registers(self):
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        self.password_2.setText('')
        # –°—á–∏—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã–µ (–ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å, –∏–º—è)
        login = self.username_2.text()
        password = self.password.text()
        name = self.password_3.text()
        if login == "" or password == "" or name == "":
            self.password_2.setText("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return False
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        sock.send("2".encode())
        # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞
        self.username_2.setText('')
        self.password.setText('')
        self.password_3.setText('')
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã–µ
        sock.send(login.encode())
        sleep(0.1)
        sock.send(password.encode())
        sleep(0.1)
        sock.send(name.encode())
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        response = sock.recv(1024).decode()
        self.password_2.setText(response)
        # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
        if "–£—Å–ø–µ—à–Ω–æ" in response:
            self.close()
            ex = Logup(self.sock)
            ex.show()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏"
    def to_log(self):
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –í—Ö–æ–¥–∞
        self.close()
        ex = Logup(self.sock)
        ex.show()


class Chat(QDialog):
    def __init__(self, sock):
        super().__init__()
        self.sock = sock
        uic.loadUi('chat.ui', self)
        self.setWindowTitle('ChatBobchat')
        self.createaccbutton.clicked.connect(lambda: self.send_message())
        self.textBrowser.setReadOnly(True)
        self.password_2.setReadOnly(True)
        th = Thread(target=self.get_message, daemon=True)
        th.start()

    def get_message(self):
        while True:
            messages = sock.recv(1024).decode().split(';')
            active_users = messages[0]
            sleep(0.1)
            if not messages:
                sleep(0.1)
                continue
            try:
                self.textBrowser.append(messages[1])
                self.password_2.setText('')
                self.password_2.setText(active_users)
            except Exception as e:
                print(e)

    def send_message(self):
        message = self.password.text()
        sleep(0.1)
        data = datetime.now().strftime("%Y-%m-%d %H:%M")
        end = f"""{data}
{message}"""
        if message == "":
            clown = "–Ø –∫–ª–æ—É–Ω ü§°"
            sleep(0.1)
            sock.send(clown.encode('utf-8'))
        else:
            sock.send(end.encode('utf-8'))
            sleep(0.1)
            self.password.setText('')


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = IPconnect(sock)
    ex.show()
    try:
        sys.exit(app.exec())
    except SystemExit:
        sock.send("–ü–æ–∫–∏–¥–∞–µ—Ç —á–∞—Çüëã".encode())
        print("...")
        sock.close()
